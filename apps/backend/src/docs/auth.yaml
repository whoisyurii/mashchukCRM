/auth/register:
  post:
    summary: Register new user
    description: Create a new user account
    tags:
      - Authentication
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - email
              - password
            properties:
              username:
                type: string
                description: Username for the new account
              email:
                type: string
                format: email
                description: Email address
              password:
                type: string
                minLength: 6
                description: Password (minimum 6 characters)
              firstName:
                type: string
                description: First name
              lastName:
                type: string
                description: Last name
    responses:
      '201':
        description: User registered successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                user:
                  type: object
                  properties:
                    id:
                      type: string
                    username:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
      '400':
        description: Bad request - validation error
      '409':
        description: Conflict - user already exists
      '500':
        description: Server error

/auth/login:
  post:
    summary: User login
    description: Authenticate user and return JWT tokens
    tags:
      - Authentication
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                description: User email address
              password:
                type: string
                description: User password
    responses:
      '200':
        description: Login successful
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                accessToken:
                  type: string
                refreshToken:
                  type: string
                user:
                  type: object
                  properties:
                    id:
                      type: string
                    username:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
      '401':
        description: Unauthorized - invalid credentials
      '500':
        description: Server error

/auth/refresh:
  post:
    summary: Refresh access token
    description: Get new access token using refresh token
    tags:
      - Authentication
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refreshToken
            properties:
              refreshToken:
                type: string
                description: Valid refresh token
    responses:
      '200':
        description: Token refreshed successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                refreshToken:
                  type: string
      '401':
        description: Unauthorized - invalid or expired refresh token
      '500':
        description: Server error

/auth/logout:
  post:
    summary: User logout
    description: Logout user and invalidate refresh token
    tags:
      - Authentication
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refreshToken
            properties:
              refreshToken:
                type: string
                description: Refresh token to invalidate
    responses:
      '200':
        description: Logout successful
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '401':
        description: Unauthorized
      '500':
        description: Server error

/auth/me:
  get:
    summary: Get current user
    description: Get current authenticated user information
    tags:
      - Authentication
    security:
      - bearerAuth: []
    responses:
      '200':
        description: User information retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                username:
                  type: string
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                createdAt:
                  type: string
                  format: date-time
      '401':
        description: Unauthorized
      '500':
        description: Server error