// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   // SuperAdmin, Admin, User
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  companies Company[]
  actionHistory ActionHistory[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  service   String
  capital   Int
  status    String   @default("Active") // only active
  logoUrl   String?  // path to logo file
  userId    String?  // can be null if not assigned to a user
  address   String?  // company address
  latitude  Float?   // latitude coordinate
  longitude Float?   // longitude coordinate
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  actionHistory ActionHistory[]

  @@map("companies")
}

model ActionHistory {
  id        String   @id @default(uuid())
  action    String   // created, updated, deleted
  type      String   // company, user, profile
  details   String
  target    String?  // company name, users email etc.
  userId    String
  companyId String?  // optional relation to company
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("action_history")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}
